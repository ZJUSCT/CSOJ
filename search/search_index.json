{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"ZJUSCT CSOJ","text":"<p>CSOJ is a fully Containerized Secure Online Judge system.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>GitHub Pages</p> <p></p>"},{"location":"#install","title":"Install","text":"<p>Release</p> <p></p>"},{"location":"#related-repo","title":"Related Repo","text":"<ul> <li>ZJUSCT/CSOJ-WebUI</li> <li>ZJUSCT/CSOJ-AdminPanel</li> <li>ZJUSCT/CSOJ-cli</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This document will guide you through compiling and running the CSOJ backend service.</p>"},{"location":"getting-started/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li>Go: Version <code>1.20</code> or higher is recommended.</li> <li>Docker: The Docker service must be installed and running on the judger nodes. CSOJ communicates with the Docker Daemon via a TCP socket.</li> </ul>"},{"location":"getting-started/#2-compile-the-project","title":"2. Compile the Project","text":"<p>After cloning the project repository, execute the following command in the project root to compile the <code>CSOJ</code> executable:</p> <pre><code>go build -o csoj ./cmd/CSOJ/main.go\n````\n\nThis will generate an executable file named `csoj` in the project root directory.\n\n## 3\\. Prepare Configuration Files\n\nThe core of CSOJ is its configuration. You will need at least one main configuration file.\n\n1.  Create a `configs` folder in the project root.\n2.  Create a `config.yaml` file inside the `configs` folder.\n\nHere is a minimal example of `config.yaml`:\n\n```yaml\n# configs/config.yaml\n\nlisten: \":8080\" # Listen address for the user-facing API service\n\nlogger:\n  level: \"debug\" # Log level (can be \"debug\" or \"production\")\n  file: \"csoj.log\" # (Optional) Path to log file.\n\nstorage:\n  database: \"data/csoj.db\" # Path to the SQLite database file\n  user_avatar: \"data/avatars\" # Directory for user avatars\n  submission_content: \"data/submissions\" # Directory for user submission content\n  submission_log: \"data/logs\" # Directory for judger logs\n\nauth:\n  jwt:\n    secret: \"a_very_secret_key_change_me\" # JWT signing secret, MUST be changed\n    expire_hours: 72\n  local:\n    enabled: true # Enable local username/password registration and login\n\n# Define a judger cluster\ncluster:\n  - name: \"default-cluster\"\n    node:\n      - name: \"local-node\"\n        cpu: 4 # Total CPU cores available for judging on this node\n        memory: 4096 # Total memory (in MB) available for judging\n        docker:\n          host: \"tcp://127.0.0.1:2375\" # Address of the Docker Daemon\n\n# Path to the root directory containing all contest folders\ncontests_root: \"contests\"\n\n# (Optional) Dynamic links for the frontend navigation bar\nlinks:\n  - name: \"Project Source\"\n    url: \"https://github.com/ZJUSCT/CSOJ\"\n</code></pre> <p>For more details on configuration files, please refer to the Configuration Guides.</p>"},{"location":"getting-started/#4-prepare-contest-and-problem-files","title":"4. Prepare Contest and Problem Files","text":"<p>Based on the <code>contests_root</code> configuration in <code>config.yaml</code>, create the corresponding directories and files. For the example above, you would need the following structure:</p> <pre><code>.\n\u251c\u2500\u2500 contests\n\u2502   \u2514\u2500\u2500 sample-contest\n\u2502       \u251c\u2500\u2500 contest.yaml\n\u2502       \u251c\u2500\u2500 index.md\n\u2502       \u2514\u2500\u2500 p1001-aplusb\n\u2502           \u251c\u2500\u2500 index.md\n\u2502           \u2514\u2500\u2500 problem.yaml\n\u2514\u2500\u2500 ...\n</code></pre> <p>To learn how to write <code>contest.yaml</code> and <code>problem.yaml</code>, see Contest Config and Problem Config.</p>"},{"location":"getting-started/#5-run-the-service","title":"5. Run the Service","text":"<p>Once the above steps are complete, you can start the CSOJ service with the following command:</p> <pre><code># The -c flag specifies the path to the main configuration file\n./csoj -c configs/config.yaml\n</code></pre> <p>If everything is configured correctly, you should see output similar to this in your console:</p> <pre><code>ZJUSCT CSOJ dev-build - Fully Containerized Secure Online Judgement\n\n{\"level\":\"info\",\"ts\":...,\"caller\":\"...\",\"msg\":\"database initialized successfully\"}\n{\"level\":\"info\",\"ts\":...,\"caller\":\"...\",\"msg\":\"successfully recovered and cleaned up interrupted tasks\"}\n{\"level\":\"info\",\"ts\":...,\"caller\":\"...\",\"msg\":\"found 1 contest directories in 'contests'\"}\n{\"level\":\"info\",\"ts\":...,\"caller\":\"...\",\"msg\":\"loaded 1 contests and 1 problems\"}\n{\"level\":\"info\",\"ts\":...,\"caller\":\"...\",\"msg\":\"judger scheduler started\"}\n{\"level\":\"info\",\"ts\":...,\"caller\":\"...\",\"msg\":\"starting user server at :8080\"}\n</code></pre> <p>The CSOJ backend service is now running at <code>http://localhost:8080</code>.</p>"},{"location":"api-reference/admin-api/","title":"Admin API Reference","text":"<p>The Admin API provides a set of powerful endpoints for system maintenance and management. By default, the Admin API service is separate from the User API and runs on a different port (which must be enabled and configured in <code>config.yaml</code>).</p>"},{"location":"api-reference/admin-api/#authentication","title":"Authentication","text":"<p>The current version of the Admin API has no built-in authentication mechanism. It is crucial to ensure that the Admin API's listen address is only accessible from trusted network environments (e.g., an internal network or localhost), or to add an authentication layer using a reverse proxy.</p>"},{"location":"api-reference/admin-api/#system-management","title":"System Management","text":""},{"location":"api-reference/admin-api/#post-reload","title":"<code>POST /reload</code>","text":"<ul> <li>Description: Hot-reloads all contest and problem configurations from disk.</li> <li>The system rescans the directory specified in <code>contests_root</code> in <code>config.yaml</code>.</li> <li>New or modified contests/problems will be loaded.</li> <li>If a problem is deleted, all submission records associated with that problem will also be permanently deleted from the database, including any running containers associated with them.</li> <li>Success Response (<code>200 OK</code>):   <pre><code>{\n  \"code\": 0,\n  \"data\": {\n    \"contests_loaded\": 2,\n    \"problems_loaded\": 15,\n    \"submissions_deleted\": 5\n  },\n  \"message\": \"Reload successful\"\n}\n</code></pre></li> </ul>"},{"location":"api-reference/admin-api/#user-management","title":"User Management","text":""},{"location":"api-reference/admin-api/#get-users","title":"<code>GET /users</code>","text":"<ul> <li>Description: Gets a list of all users. Can be filtered by a <code>query</code> parameter that searches User ID, username, and nickname.</li> </ul>"},{"location":"api-reference/admin-api/#post-users","title":"<code>POST /users</code>","text":"<ul> <li>Description: Manually creates a new user.</li> <li>Request Body (<code>application/json</code>):     <pre><code>{\n  \"username\": \"admin_created_user\",\n  \"password_hash\": \"$2a$14$....\", // bcrypt hash, required for local auth users\n  \"nickname\": \"Test User\"\n}\n</code></pre></li> </ul>"},{"location":"api-reference/admin-api/#get-usersid","title":"<code>GET /users/:id</code>","text":"<ul> <li>Description: Gets a single user by their ID.</li> </ul>"},{"location":"api-reference/admin-api/#patch-usersid","title":"<code>PATCH /users/:id</code>","text":"<ul> <li>Description: Updates a user's nickname and signature.</li> </ul>"},{"location":"api-reference/admin-api/#delete-usersid","title":"<code>DELETE /users/:id</code>","text":"<ul> <li>Description: Deletes a user by their ID.</li> </ul>"},{"location":"api-reference/admin-api/#post-usersidreset-password","title":"<code>POST /users/:id/reset-password</code>","text":"<ul> <li>Description: Resets the password for a local-auth user.</li> <li>Request Body (<code>application/json</code>): <code>{\"password\": \"new_secure_password\"}</code></li> </ul>"},{"location":"api-reference/admin-api/#post-usersidregister-contest","title":"<code>POST /users/:id/register-contest</code>","text":"<ul> <li>Description: Manually registers a user for a specific contest.</li> <li>Request Body (<code>application/json</code>): <code>{\"contest_id\": \"contest-id-here\"}</code></li> </ul>"},{"location":"api-reference/admin-api/#get-usersidhistory","title":"<code>GET /users/:id/history</code>","text":"<ul> <li>Description: Gets a user's score history for a specific contest.</li> <li>Query Parameter: <code>contest_id</code> (required).</li> </ul>"},{"location":"api-reference/admin-api/#get-usersidscores","title":"<code>GET /users/:id/scores</code>","text":"<ul> <li>Description: Gets a user's best scores for all problems they have submitted to.</li> </ul>"},{"location":"api-reference/admin-api/#contest-problem-management","title":"Contest &amp; Problem Management","text":""},{"location":"api-reference/admin-api/#get-contests","title":"<code>GET /contests</code>","text":"<ul> <li>Description: Gets a list of all loaded contests, regardless of start/end times.</li> </ul>"},{"location":"api-reference/admin-api/#post-contests","title":"<code>POST /contests</code>","text":"<ul> <li>Description: Creates a new contest by creating the necessary directory and <code>contest.yaml</code> file on disk. Requires a <code>reload</code> to be active.</li> <li>Request Body: A full <code>Contest</code> JSON object.</li> </ul>"},{"location":"api-reference/admin-api/#get-contestsid","title":"<code>GET /contests/:id</code>","text":"<ul> <li>Description: Gets details for a specific contest, regardless of start/end times.</li> </ul>"},{"location":"api-reference/admin-api/#put-contestsid","title":"<code>PUT /contests/:id</code>","text":"<ul> <li>Description: Updates the <code>contest.yaml</code> file for a contest. Triggers a system <code>reload</code>.</li> <li>Request Body: A full <code>Contest</code> JSON object.</li> </ul>"},{"location":"api-reference/admin-api/#delete-contestsid","title":"<code>DELETE /contests/:id</code>","text":"<ul> <li>Description: Deletes a contest's directory and all its contents from disk. Triggers a system <code>reload</code>.</li> </ul>"},{"location":"api-reference/admin-api/#post-contestsidproblems","title":"<code>POST /contests/:id/problems</code>","text":"<ul> <li>Description: Creates a new problem within a contest. Triggers a system <code>reload</code>.</li> <li>Request Body: A full <code>Problem</code> JSON object.</li> </ul>"},{"location":"api-reference/admin-api/#get-problems","title":"<code>GET /problems</code>","text":"<ul> <li>Description: Gets a list of all loaded problems.</li> </ul>"},{"location":"api-reference/admin-api/#get-problemsid","title":"<code>GET /problems/:id</code>","text":"<ul> <li>Description: Gets the full definition of a single problem.</li> </ul>"},{"location":"api-reference/admin-api/#put-problemsid","title":"<code>PUT /problems/:id</code>","text":"<ul> <li>Description: Updates a <code>problem.yaml</code> file. Triggers a system <code>reload</code>.</li> <li>Request Body: A full <code>Problem</code> JSON object.</li> </ul>"},{"location":"api-reference/admin-api/#delete-problemsid","title":"<code>DELETE /problems/:id</code>","text":"<ul> <li>Description: Deletes a problem's directory from disk. Triggers a system <code>reload</code>.</li> </ul>"},{"location":"api-reference/admin-api/#contest-assets-announcements","title":"Contest Assets &amp; Announcements","text":""},{"location":"api-reference/admin-api/#get-contestsidassets","title":"<code>GET /contests/:id/assets</code>","text":"<ul> <li>Description: Lists all static assets for a contest.</li> </ul>"},{"location":"api-reference/admin-api/#post-contestsidassets","title":"<code>POST /contests/:id/assets</code>","text":"<ul> <li>Description: Uploads one or more asset files to a contest's <code>index.assets</code> directory.</li> </ul>"},{"location":"api-reference/admin-api/#delete-contestsidassets","title":"<code>DELETE /contests/:id/assets</code>","text":"<ul> <li>Description: Deletes an asset (file or directory) from a contest.</li> </ul>"},{"location":"api-reference/admin-api/#get-contestsidannouncements","title":"<code>GET /contests/:id/announcements</code>","text":"<ul> <li>Description: Gets all announcements for a contest.</li> </ul>"},{"location":"api-reference/admin-api/#post-contestsidannouncements","title":"<code>POST /contests/:id/announcements</code>","text":"<ul> <li>Description: Creates a new announcement for a contest.</li> </ul>"},{"location":"api-reference/admin-api/#put-contestsidannouncementsannouncementid","title":"<code>PUT /contests/:id/announcements/:announcementId</code>","text":"<ul> <li>Description: Updates an existing announcement.</li> </ul>"},{"location":"api-reference/admin-api/#delete-contestsidannouncementsannouncementid","title":"<code>DELETE /contests/:id/announcements/:announcementId</code>","text":"<ul> <li>Description: Deletes an announcement.</li> </ul>"},{"location":"api-reference/admin-api/#problem-assets","title":"Problem Assets","text":""},{"location":"api-reference/admin-api/#get-problemsidassets","title":"<code>GET /problems/:id/assets</code>","text":"<ul> <li>Description: Lists all static assets for a problem.</li> </ul>"},{"location":"api-reference/admin-api/#post-problemsidassets","title":"<code>POST /problems/:id/assets</code>","text":"<ul> <li>Description: Uploads one or more asset files to a problem's <code>index.assets</code> directory.</li> </ul>"},{"location":"api-reference/admin-api/#delete-problemsidassets","title":"<code>DELETE /problems/:id/assets</code>","text":"<ul> <li>Description: Deletes an asset (file or directory) from a problem.</li> </ul>"},{"location":"api-reference/admin-api/#submission-management","title":"Submission Management","text":""},{"location":"api-reference/admin-api/#get-submissions","title":"<code>GET /submissions</code>","text":"<ul> <li>Description: Gets a paginated list of all submissions. Supports filtering by <code>problem_id</code>, <code>status</code>, and <code>user_query</code>. Supports pagination with <code>page</code> and <code>limit</code>.</li> </ul>"},{"location":"api-reference/admin-api/#get-submissionsid","title":"<code>GET /submissions/:id</code>","text":"<ul> <li>Description: Gets detailed information for a single submission.</li> </ul>"},{"location":"api-reference/admin-api/#get-submissionsidcontent","title":"<code>GET /submissions/:id/content</code>","text":"<ul> <li>Description: Downloads the content of a submission as a zip archive.</li> </ul>"},{"location":"api-reference/admin-api/#patch-submissionsid","title":"<code>PATCH /submissions/:id</code>","text":"<ul> <li>Description: Manually updates the <code>status</code>, <code>score</code>, or <code>info</code> field of a submission. Warning: This does not trigger score recalculation.</li> </ul>"},{"location":"api-reference/admin-api/#delete-submissionsid","title":"<code>DELETE /submissions/:id</code>","text":"<ul> <li>Description: Permanently deletes a submission record and its content from disk.</li> </ul>"},{"location":"api-reference/admin-api/#post-submissionsidrejudge","title":"<code>POST /submissions/:id/rejudge</code>","text":"<ul> <li>Description: Re-judges an existing submission.<ul> <li>The system marks the original submission as invalid (<code>is_valid: false</code>).</li> <li>It then copies the original submission's content, creates a new submission record, and adds it to the judging queue.</li> <li>The scoring system automatically handles score changes resulting from the re-judge.</li> </ul> </li> </ul>"},{"location":"api-reference/admin-api/#patch-submissionsidvalidity","title":"<code>PATCH /submissions/:id/validity</code>","text":"<ul> <li>Description: Manually marks a submission as valid or invalid. This triggers a full score recalculation for the user on that problem.</li> <li>Request Body (<code>application/json</code>): <code>{\"is_valid\": false}</code></li> </ul>"},{"location":"api-reference/admin-api/#post-submissionsidinterrupt","title":"<code>POST /submissions/:id/interrupt</code>","text":"<ul> <li>Description: Forcibly interrupts a queued or running submission, marking it as <code>Failed</code>.</li> </ul>"},{"location":"api-reference/admin-api/#get-submissionsidcontainersconidlog","title":"<code>GET /submissions/:id/containers/:conID/log</code>","text":"<ul> <li>Description: Gets the full log for any step (container) of any submission, regardless of the <code>show</code> flag. The log is returned in NDJSON format.</li> </ul>"},{"location":"api-reference/admin-api/#score-leaderboard-management","title":"Score &amp; Leaderboard Management","text":""},{"location":"api-reference/admin-api/#post-scoresrecalculate","title":"<code>POST /scores/recalculate</code>","text":"<ul> <li>Description: Triggers a score recalculation for a specific user on a specific problem.</li> <li>Request Body (<code>application/json</code>): <code>{\"user_id\": \"user-uuid\", \"problem_id\": \"problem-id\"}</code></li> </ul>"},{"location":"api-reference/admin-api/#get-contestsidleaderboard","title":"<code>GET /contests/:id/leaderboard</code>","text":"<ul> <li>Description: Gets the leaderboard for a contest.</li> </ul>"},{"location":"api-reference/admin-api/#get-contestsidtrend","title":"<code>GET /contests/:id/trend</code>","text":"<ul> <li>Description: Gets score trend data for top users. Supports a <code>maxnum</code> query parameter to control the number of users.</li> </ul>"},{"location":"api-reference/admin-api/#cluster-container-management","title":"Cluster &amp; Container Management","text":""},{"location":"api-reference/admin-api/#get-clustersstatus","title":"<code>GET /clusters/status</code>","text":"<ul> <li>Description: Gets the current resource usage and queue lengths for all configured clusters and nodes.</li> </ul>"},{"location":"api-reference/admin-api/#get-clustersclusternamenodesnodename","title":"<code>GET /clusters/:clusterName/nodes/:nodeName</code>","text":"<ul> <li>Description: Gets detailed status for a specific node.</li> </ul>"},{"location":"api-reference/admin-api/#post-clustersclusternamenodesnodenamepause","title":"<code>POST /clusters/:clusterName/nodes/:nodeName/pause</code>","text":"<ul> <li>Description: Pauses a node, preventing it from accepting new judging tasks.</li> </ul>"},{"location":"api-reference/admin-api/#post-clustersclusternamenodesnodenameresume","title":"<code>POST /clusters/:clusterName/nodes/:nodeName/resume</code>","text":"<ul> <li>Description: Resumes a paused node.</li> </ul>"},{"location":"api-reference/admin-api/#get-containers","title":"<code>GET /containers</code>","text":"<ul> <li>Description: Gets a paginated list of all containers. Supports filtering by <code>submission_id</code>, <code>status</code>, and <code>user_query</code>.</li> </ul>"},{"location":"api-reference/admin-api/#get-containersid","title":"<code>GET /containers/:id</code>","text":"<ul> <li>Description: Gets details for a single container.</li> </ul>"},{"location":"api-reference/admin-api/#websocket","title":"WebSocket","text":""},{"location":"api-reference/admin-api/#get-wssubmissionsidcontainersconidlogs","title":"<code>GET /ws/submissions/:id/containers/:conID/logs</code>","text":"<ul> <li>Description: Establishes a WebSocket connection to stream the complete log for any container. For finished containers, it streams the saved log file. For running containers, it first sends all historical logs from the cache and then continues to stream new logs in real-time. This is available regardless of the <code>show</code> flag.</li> <li>Authentication: None.</li> </ul>"},{"location":"api-reference/user-api/","title":"User API Reference","text":"<p>The User API is the primary way for regular users to interact with the CSOJ system. All User API routes are prefixed with <code>/api/v1</code>.</p>"},{"location":"api-reference/user-api/#authentication","title":"Authentication","text":"<ul> <li>JWT: Most authenticated endpoints are secured using an <code>Authorization: Bearer &lt;token&gt;</code> HTTP header.</li> <li>Obtaining a Token: Users obtain a JWT through one of the login endpoints.</li> </ul>"},{"location":"api-reference/user-api/#auth","title":"Auth","text":""},{"location":"api-reference/user-api/#get-authstatus","title":"<code>GET /auth/status</code>","text":"<ul> <li>Description: Gets the status of available authentication methods.</li> <li>Authentication: None</li> <li>Success Response (<code>200 OK</code>):   <pre><code>{\n  \"code\": 0,\n  \"data\": {\n    \"local_auth_enabled\": true\n  },\n  \"message\": \"Auth status retrieved\"\n}\n</code></pre></li> </ul>"},{"location":"api-reference/user-api/#post-authlocalregister","title":"<code>POST /auth/local/register</code>","text":"<ul> <li> <p>Description: Registers a new user (when local auth is enabled).</p> </li> <li> <p>Authentication: None</p> </li> <li> <p>Request Body (<code>application/json</code>):</p> <pre><code>{\n  \"username\": \"newuser\",\n  \"password\": \"password123\",\n  \"nickname\": \"New User\"\n}\n</code></pre> </li> <li> <p>Success Response (<code>200 OK</code>):</p> <pre><code>{\n  \"code\": 0,\n  \"data\": { \"id\": \"user-uuid\", \"username\": \"newuser\" },\n  \"message\": \"User registered successfully\"\n}\n</code></pre> </li> </ul>"},{"location":"api-reference/user-api/#post-authlocallogin","title":"<code>POST /auth/local/login</code>","text":"<ul> <li>Description: Logs in a user with a username and password (when local auth is enabled).</li> <li>Authentication: None</li> <li>Request Body (<code>application/json</code>):     <pre><code>{\n  \"username\": \"newuser\",\n  \"password\": \"password123\"\n}\n</code></pre></li> <li>Success Response (<code>200 OK</code>):     <pre><code>{\n  \"code\": 0,\n  \"data\": { \"token\": \"your_jwt_token_here\" },\n  \"message\": \"Login successful\"\n}\n</code></pre></li> </ul>"},{"location":"api-reference/user-api/#get-authgitlablogin","title":"<code>GET /auth/gitlab/login</code>","text":"<ul> <li>Description: Redirects the user to GitLab for OAuth2 authentication.</li> <li>Authentication: None</li> </ul>"},{"location":"api-reference/user-api/#get-authgitlabcallback","title":"<code>GET /auth/gitlab/callback</code>","text":"<ul> <li>Description: The callback URL for GitLab OAuth2. On success, it returns a JWT.</li> <li>Authentication: None</li> </ul>"},{"location":"api-reference/user-api/#general-info","title":"General Info","text":""},{"location":"api-reference/user-api/#get-links","title":"<code>GET /links</code>","text":"<ul> <li>Description: Gets the list of dynamic navigation links configured in <code>config.yaml</code>.</li> <li>Authentication: None</li> <li>Success Response (<code>200 OK</code>):     <pre><code>{\n  \"code\": 0,\n  \"data\": [\n    { \"name\": \"Source Code\", \"url\": \"[https://github.com/ZJUSCT/CSOJ](https://github.com/ZJUSCT/CSOJ)\" },\n    { \"name\": \"About\", \"url\": \"/about\" }\n  ],\n  \"message\": \"Links retrieved successfully\"\n}\n</code></pre></li> </ul>"},{"location":"api-reference/user-api/#contests","title":"Contests","text":""},{"location":"api-reference/user-api/#get-contests","title":"<code>GET /contests</code>","text":"<ul> <li>Description: Gets a list of all available contests.</li> <li>Authentication: None</li> <li>Success Response (<code>200 OK</code>):     <pre><code>{\n  \"code\": 0,\n  \"data\": {\n    \"contest-id-1\": { \"id\": \"...\", \"name\": \"...\", \"problem_ids\": [...] },\n    \"contest-id-2\": { \"id\": \"...\", \"name\": \"...\", \"problem_ids\": [...] }\n  },\n  \"message\": \"Contests loaded\"\n}\n</code></pre></li> </ul>"},{"location":"api-reference/user-api/#get-contestsid","title":"<code>GET /contests/:id</code>","text":"<ul> <li>Description: Gets detailed information for a single contest. If the contest has not started or has ended, the <code>problem_ids</code> array will be empty.</li> <li>Authentication: None</li> <li>Success Response (<code>200 OK</code>):     <pre><code>{\n  \"code\": 0,\n  \"data\": {\n    \"id\": \"sample-contest\",\n    \"name\": \"Sample Introductory Contest\",\n    \"starttime\": \"...\",\n    \"endtime\": \"...\",\n    \"problem_ids\": [\"aplusb\", \"fizzbuzz\"],\n    \"description\": \"Contest description...\",\n    \"announcements\": []\n  },\n  \"message\": \"Contest found\"\n}\n</code></pre></li> </ul>"},{"location":"api-reference/user-api/#get-contestsidannouncements","title":"<code>GET /contests/:id/announcements</code>","text":"<ul> <li>Description: Gets the list of announcements for a specific contest. Announcements are only visible after the contest has started.</li> <li>Authentication: None</li> </ul>"},{"location":"api-reference/user-api/#get-contestsidleaderboard","title":"<code>GET /contests/:id/leaderboard</code>","text":"<ul> <li>Description: Gets the leaderboard for a contest.</li> <li>Authentication: None</li> </ul>"},{"location":"api-reference/user-api/#get-contestsidtrend","title":"<code>GET /contests/:id/trend</code>","text":"<ul> <li>Description: Gets the score trend data for the top 10 users (plus ties) in a contest.</li> <li>Authentication: None</li> </ul>"},{"location":"api-reference/user-api/#post-contestsidregister","title":"<code>POST /contests/:id/register</code>","text":"<ul> <li>Description: Registers the current user for an ongoing contest.</li> <li>Authentication: JWT</li> <li>Success Response (<code>200 OK</code>):     <pre><code>{\n  \"code\": 0,\n  \"data\": null,\n  \"message\": \"Successfully registered for contest\"\n}\n</code></pre></li> </ul>"},{"location":"api-reference/user-api/#get-contestsidhistory","title":"<code>GET /contests/:id/history</code>","text":"<ul> <li>Description: Gets the score change history for the current user in a contest.</li> <li>Authentication: JWT</li> </ul>"},{"location":"api-reference/user-api/#problems","title":"Problems","text":""},{"location":"api-reference/user-api/#get-problemsid","title":"<code>GET /problems/:id</code>","text":"<ul> <li>Description: Gets detailed information for a single problem. Only accessible after the contest and problem have both started.</li> <li>Authentication: None</li> </ul>"},{"location":"api-reference/user-api/#post-problemsidsubmit","title":"<code>POST /problems/:id/submit</code>","text":"<ul> <li>Description: Submits code/files for a problem. The request must be of type <code>multipart/form-data</code>. The user must be registered for the contest before submitting.</li> <li>Authentication: JWT</li> <li>Request Body (<code>multipart/form-data</code>):<ul> <li><code>files</code>: One or more file fields, preserving directory structure.</li> </ul> </li> <li>Success Response (<code>200 OK</code>):     <pre><code>{\n  \"code\": 0,\n  \"data\": { \"submission_id\": \"new-submission-uuid\" },\n  \"message\": \"Submission received\"\n}\n</code></pre></li> </ul>"},{"location":"api-reference/user-api/#get-problemsidattempts","title":"<code>GET /problems/:id/attempts</code>","text":"<ul> <li>Description: Gets information about the current user's submission attempts for a problem.</li> <li>Authentication: JWT</li> <li>Success Response (<code>200 OK</code>):     <pre><code>{\n  \"code\": 0,\n  \"data\": {\n      \"limit\": 10,  // Submission limit, or null if unlimited\n      \"used\": 2,    // Submissions used\n      \"remaining\": 8 // Submissions remaining, or null if unlimited\n  },\n  \"message\": \"Submission attempts retrieved successfully\"\n}\n</code></pre></li> </ul>"},{"location":"api-reference/user-api/#submissions","title":"Submissions","text":""},{"location":"api-reference/user-api/#get-submissions","title":"<code>GET /submissions</code>","text":"<ul> <li>Description: Gets all submissions for the current user.</li> <li>Authentication: JWT</li> </ul>"},{"location":"api-reference/user-api/#get-submissionsid","title":"<code>GET /submissions/:id</code>","text":"<ul> <li>Description: Gets a specific submission for the current user.</li> <li>Authentication: JWT</li> </ul>"},{"location":"api-reference/user-api/#post-submissionsidinterrupt","title":"<code>POST /submissions/:id/interrupt</code>","text":"<ul> <li>Description: Interrupts a submission that is currently queued or running.</li> <li>Authentication: JWT</li> </ul>"},{"location":"api-reference/user-api/#get-submissionsidqueue_position","title":"<code>GET /submissions/:id/queue_position</code>","text":"<ul> <li>Description: Gets the queue position for a queued submission. Returns <code>0</code> if the submission is not in the queue.</li> <li>Authentication: JWT</li> </ul>"},{"location":"api-reference/user-api/#get-submissionsidcontainersconidlog","title":"<code>GET /submissions/:id/containers/:conID/log</code>","text":"<ul> <li>Description: Gets the full log for a specific step (container) of a submission. The step must be configured with <code>show: true</code> in <code>problem.yaml</code>. The log is returned in NDJSON format.</li> <li>Authentication: JWT</li> </ul>"},{"location":"api-reference/user-api/#user-profile","title":"User Profile","text":""},{"location":"api-reference/user-api/#get-userprofile","title":"<code>GET /user/profile</code>","text":"<ul> <li>Description: Gets the current user's profile.</li> <li>Authentication: JWT</li> </ul>"},{"location":"api-reference/user-api/#get-usersid","title":"<code>GET /users/:id</code>","text":"<ul> <li>Description: Gets the publicly available profile information for any user by their ID.</li> <li>Authentication: None</li> </ul>"},{"location":"api-reference/user-api/#patch-userprofile","title":"<code>PATCH /user/profile</code>","text":"<ul> <li>Description: Updates the current user's nickname and signature.</li> <li>Authentication: JWT</li> <li>Request Body (<code>application/json</code>):     <pre><code>{\n  \"nickname\": \"My New Nickname\",\n  \"signature\": \"Hello World!\"\n}\n</code></pre></li> </ul>"},{"location":"api-reference/user-api/#post-useravatar","title":"<code>POST /user/avatar</code>","text":"<ul> <li>Description: Uploads and updates the current user's avatar.</li> <li>Authentication: JWT</li> <li>Request Body (<code>multipart/form-data</code>):<ul> <li><code>avatar</code>: An image file field (JPG, PNG, WEBP; max 1MB).</li> </ul> </li> </ul>"},{"location":"api-reference/user-api/#assets","title":"Assets","text":"<p>These endpoints serve static assets. Some require authentication, while others are public.</p>"},{"location":"api-reference/user-api/#get-assetsavatarsfilename","title":"<code>GET /assets/avatars/:filename</code>","text":"<ul> <li>Description: Gets a user avatar image.</li> <li>Authentication: None</li> </ul>"},{"location":"api-reference/user-api/#get-assetscontestsidassetpath","title":"<code>GET /assets/contests/:id/*assetpath</code>","text":"<ul> <li>Description: Gets a static asset referenced in a contest's <code>index.md</code> description.</li> <li>Authentication: JWT</li> </ul>"},{"location":"api-reference/user-api/#get-assetsproblemsidassetpath","title":"<code>GET /assets/problems/:id/*assetpath</code>","text":"<ul> <li>Description: Gets a static asset referenced in a problem's <code>index.md</code> statement.</li> <li>Authentication: JWT</li> </ul>"},{"location":"api-reference/user-api/#websocket","title":"WebSocket","text":""},{"location":"api-reference/user-api/#get-wssubmissionssubidcontainersconidlogstokenjwt","title":"<code>GET /ws/submissions/:subID/containers/:conID/logs?token=&lt;jwt&gt;</code>","text":"<ul> <li>Description: Establishes a WebSocket connection to stream the log from a judging container, if permitted by the <code>show: true</code> flag in the problem's workflow step. For finished containers, it streams the saved log file. For running containers, it streams logs in real-time.</li> <li>Authentication: JWT passed via the <code>token</code> query parameter.</li> <li>Message Format (JSON):     <pre><code>{\n  \"stream\": \"stdout\", // \"stdout\", \"stderr\", \"info\", or \"error\"\n  \"data\": \"log content line\"\n}\n</code></pre></li> </ul>"},{"location":"configuration/contest-config/","title":"Contest Config (contest.yaml)","text":"<p>Each contest is defined by a separate directory. All such directories should be placed inside the path specified by <code>contests_root</code> in the main <code>config.yaml</code> file.</p> <p>A contest directory must contain a <code>contest.yaml</code> file and an <code>index.md</code> file for the contest description. It may also contain an <code>announcements.yaml</code> file and an <code>index.assets/</code> directory for static files, which are managed via the Admin API.</p>"},{"location":"configuration/contest-config/#directory-structure-example","title":"Directory Structure Example","text":"<pre><code>contests/sample-contest/\n\u251c\u2500\u2500 contest.yaml         \\# The core configuration file for the contest\n\u251c\u2500\u2500 index.md             \\# Detailed contest description in Markdown\n\u251c\u2500\u2500 announcements.yaml   \\# (Managed by API) Stores contest announcements\n\u251c\u2500\u2500 index.assets/        \\# (Managed by API) Static assets for the description\n\u2514\u2500\u2500 p1001-aplusb/        \\# A problem directory; the name is arbitrary\n</code></pre>"},{"location":"configuration/contest-config/#contestyaml-example","title":"<code>contest.yaml</code> Example","text":"<pre><code># The unique ID for the contest\nid: \"sample-contest-1\"\n\n# The name of the contest to be displayed on the frontend\nname: \"Sample Introductory Contest\"\n\n# Contest start time (ISO 8601 format)\nstarttime: \"2025-10-01T09:00:00+08:00\"\n\n# Contest end time (ISO 8601 format)\nendtime: \"2025-10-01T12:00:00+08:00\"\n\n# A list of problems included in the contest\n# Each item is a relative path to a directory containing a problem.yaml file\nproblems:\n  - \"p1001-aplusb\"\n  - \"p1002-fizzbuzz\"\n</code></pre>"},{"location":"configuration/contest-config/#field-reference","title":"Field Reference","text":""},{"location":"configuration/contest-config/#id","title":"<code>id</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Required: Yes</li> <li>Description: A globally unique identifier for the contest. It's recommended to use an easily recognizable string, like <code>final-2025</code>.</li> </ul>"},{"location":"configuration/contest-config/#name","title":"<code>name</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Required: Yes</li> <li>Description: The display name of the contest.</li> </ul>"},{"location":"configuration/contest-config/#starttime","title":"<code>starttime</code>","text":"<ul> <li>Type: <code>string</code> (ISO 8601 format)</li> <li>Required: Yes</li> <li>Description: The official start time of the contest. Before this time, users cannot view the problem list or submit code.</li> <li>Format: <code>YYYY-MM-DDTHH:MM:SSZ</code> or <code>YYYY-MM-DDTHH:MM:SS\u00b1hh:mm</code>. For example, <code>2025-10-26T14:00:00+08:00</code> represents 2 PM Beijing time.</li> </ul>"},{"location":"configuration/contest-config/#endtime","title":"<code>endtime</code>","text":"<ul> <li>Type: <code>string</code> (ISO 8601 format)</li> <li>Required: Yes</li> <li>Description: The end time of the contest. After this time, users cannot submit code.</li> </ul>"},{"location":"configuration/contest-config/#problems","title":"<code>problems</code>","text":"<ul> <li>Type: <code>array of strings</code></li> <li>Required: Yes</li> <li>Description: Defines which problems are included in the contest. Each string in the array is a directory path relative to the current <code>contest.yaml</code> file. This directory must contain a <code>problem.yaml</code> file.</li> </ul>"},{"location":"configuration/main-config/","title":"Main Config (config.yaml)","text":"<p><code>config.yaml</code> is the primary configuration file for the CSOJ system. It defines the core behavior of the service, including listen addresses, storage paths, authentication methods, and judger clusters.</p>"},{"location":"configuration/main-config/#full-configuration-example","title":"Full Configuration Example","text":"<pre><code># Listen address for the user-facing API\nlisten: \":8080\"\n\n# Configuration for the Admin API service\nadmin:\n  enabled: true\n  listen: \":8081\"\n\n# Logger configuration\nlogger:\n  level: \"debug\" # Options: \"debug\", \"production\"\n  file: \"\"       # Path to log file. If empty, logs to console.\n\n# Storage path configuration\nstorage:\n  user_avatar: \"data/avatars\"        # User avatars\n  submission_content: \"data/submissions\" # User-submitted files\n  database: \"data/csoj.db\"           # SQLite database file\n  submission_log: \"data/logs\"        # Logs from judging containers\n\n# Authentication configuration\nauth:\n  jwt:\n    secret: \"a_very_secret_key_change_me\" # JWT signing secret, MUST be changed\n    expire_hours: 72                     # JWT expiration time in hours\n\n  # Local username/password authentication\n  local:\n    enabled: true\n\n  # GitLab OAuth2 authentication\n  gitlab:\n    url: \"[https://gitlab.com](https://gitlab.com)\"\n    client_id: \"YOUR_GITLAB_CLIENT_ID\"\n    client_secret: \"YOUR_GITLAB_CLIENT_SECRET\"\n    redirect_uri: \"http://localhost:8080/api/v1/auth/gitlab/callback\"\n    frontend_callback_url: \"http://localhost:3000/callback\" # URL for frontend to handle the final redirect with the token\n\n# Cross-Origin Resource Sharing (CORS) configuration\ncors:\n  allowed_origins:\n    - \"http://localhost:3000\"\n    - \"[http://127.0.0.1:3000](http://127.0.0.1:3000)\"\n\n# Dynamic links for the frontend navigation bar\nlinks:\n  - name: \"Project Source\"\n    url: \"[https://github.com/ZJUSCT/CSOJ](https://github.com/ZJUSCT/CSOJ)\"\n  - name: \"About\"\n    url: \"/about\"\n\n# Judger cluster configuration\ncluster:\n  - name: \"default-cluster\" # Cluster name, referenced in problem configs\n    node:\n      - name: \"node-1\"\n        cpu: 4           # Total CPU cores available for judging\n        memory: 4096       # Total memory (in MB) available for judging\n        docker: # Docker Daemon connection settings for this node\n          host: \"tcp://192.168.1.101:2375\"\n          tls_verify: false\n          # ca_cert: \"/path/to/ca.pem\"\n          # cert: \"/path/to/cert.pem\"\n          # key: \"/path/to/key.pem\"\n      - name: \"node-2\"\n        cpu: 8\n        memory: 8192\n        docker:\n          host: \"tcp://192.168.1.102:2375\"\n\n# Path to the root directory containing all contest folders\ncontests_root: \"contests\"\n</code></pre>"},{"location":"configuration/main-config/#field-reference","title":"Field Reference","text":""},{"location":"configuration/main-config/#listen","title":"<code>listen</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Required: Yes</li> <li>Description: The listen address and port for the user-facing API service.</li> </ul>"},{"location":"configuration/main-config/#admin","title":"<code>admin</code>","text":"<ul> <li>Type: <code>object</code></li> <li>Required: No</li> <li>Description: Configuration for the Admin API service.<ul> <li><code>enabled</code>: (boolean) Whether to enable the Admin API service.</li> <li><code>listen</code>: (string) The listen address and port for the Admin API service.</li> </ul> </li> </ul>"},{"location":"configuration/main-config/#logger","title":"<code>logger</code>","text":"<ul> <li>Type: <code>object</code></li> <li>Required: Yes</li> <li>Description: Configuration for the logging system.<ul> <li><code>level</code>: (string) Log level. <code>debug</code> provides more verbose output, while <code>production</code> is more concise.</li> <li><code>file</code>: (string) Path to a log file. If left empty, logs are written to standard output/error (the console).</li> </ul> </li> </ul>"},{"location":"configuration/main-config/#storage","title":"<code>storage</code>","text":"<ul> <li>Type: <code>object</code></li> <li>Required: Yes</li> <li>Description: Defines storage paths for various system files.<ul> <li><code>user_avatar</code>: (string) Directory to store user-uploaded avatars.</li> <li><code>submission_content</code>: (string) Directory to store user-submitted code/files.</li> <li><code>database</code>: (string) Path to the SQLite database file.</li> <li><code>submission_log</code>: (string) Directory to store log files generated by each judging container.</li> </ul> </li> </ul>"},{"location":"configuration/main-config/#auth","title":"<code>auth</code>","text":"<ul> <li>Type: <code>object</code></li> <li>Required: Yes</li> <li>Description: User authentication settings.<ul> <li><code>jwt</code>: (object)<ul> <li><code>secret</code>: (string) The secret key used to sign and verify JWTs. You must change this to a complex random string in production.</li> <li><code>expire_hours</code>: (integer) The validity period of a JWT, in hours.</li> </ul> </li> <li><code>local</code>: (object)<ul> <li><code>enabled</code>: (boolean) Whether to enable the local username and password registration/login feature.</li> </ul> </li> <li><code>gitlab</code>: (object)<ul> <li><code>url</code>: (string) The URL of your GitLab instance's OIDC provider.</li> <li><code>client_id</code>: (string) The Client ID obtained after creating an application in GitLab.</li> <li><code>client_secret</code>: (string) The Client Secret obtained after creating an application in GitLab.</li> <li><code>redirect_uri</code>: (string) The callback URL configured in your GitLab application, which must exactly match this URI.</li> <li><code>frontend_callback_url</code>: (string) The URL on your frontend application where users are redirected after a successful login. The JWT will be appended as a <code>?token=</code> query parameter.</li> </ul> </li> </ul> </li> </ul>"},{"location":"configuration/main-config/#cors","title":"<code>cors</code>","text":"<ul> <li>Type: <code>object</code></li> <li>Required: No</li> <li>Description: Configures Cross-Origin Resource Sharing (CORS) for the API.<ul> <li><code>allowed_origins</code>: (array of strings) A list of origins that are allowed to access the API. You can add your frontend application's address here. Supports <code>*</code> as a wildcard.</li> </ul> </li> </ul>"},{"location":"configuration/main-config/#links","title":"<code>links</code>","text":"<ul> <li>Type: <code>array of objects</code></li> <li>Required: No</li> <li>Description: Defines a list of dynamic links to be displayed in the frontend's main navigation bar.<ul> <li><code>name</code>: (string) The text to display for the link.</li> <li><code>url</code>: (string) The destination URL. Can be an internal path (e.g., <code>/about</code>) or an external URL (e.g., <code>https://github.com/ZJUSCT/CSOJ</code>).</li> </ul> </li> </ul>"},{"location":"configuration/main-config/#cluster","title":"<code>cluster</code>","text":"<ul> <li>Type: <code>array of objects</code></li> <li>Required: Yes</li> <li>Description: Defines one or more judger clusters. Each cluster consists of one or more judger nodes.<ul> <li><code>name</code>: (string) A unique name for the cluster. This name is used in problem configurations to specify which cluster to use for judging.</li> <li><code>node</code>: (array of objects) The list of judger nodes in this cluster.<ul> <li><code>name</code>: (string) A unique name for the node.</li> <li><code>cpu</code>: (integer) The total number of CPU cores that the scheduler can use on this node.</li> <li><code>memory</code>: (integer) The total amount of memory (in MB) that the scheduler can use on this node.</li> <li><code>docker</code>: (object) The connection settings for the Docker Daemon on this node.<ul> <li><code>host</code>: (string) The API address, typically a TCP address like <code>tcp://127.0.0.1:2375</code>.</li> <li><code>tls_verify</code>: (boolean, optional) Whether to use TLS to connect to the daemon.</li> <li><code>ca_cert</code>, <code>cert</code>, <code>key</code>: (string, optional) Paths to TLS certificate files if <code>tls_verify</code> is true.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"configuration/main-config/#contests_root","title":"<code>contests_root</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Required: Yes</li> <li>Description: The path to the root directory that contains all contest configuration directories. CSOJ scans this directory on startup to load contest and problem information.</li> </ul>"},{"location":"configuration/problem-config/","title":"Problem Config (problem.yaml)","text":"<p>Each problem is defined by a separate directory, the path of which must be declared in the <code>problems</code> list of its parent <code>contest.yaml</code> file.</p> <p>A problem directory must contain a <code>problem.yaml</code> file and an <code>index.md</code> file for the problem statement. It may also contain an <code>index.assets/</code> directory for static files (e.g., images referenced in the statement), which is managed via the Admin API.</p>"},{"location":"configuration/problem-config/#directory-structure-example","title":"Directory Structure Example","text":"<pre><code>...\n\u251c\u2500\u2500 problem.yaml   \\# The core configuration file for the problem\n\u251c\u2500\u2500 index.md       \\# The problem statement in Markdown\n\u2514\u2500\u2500 index.assets/  \\# (Managed by API) Static assets for the statement\n</code></pre>"},{"location":"configuration/problem-config/#problemyaml-examples","title":"<code>problem.yaml</code> Examples","text":""},{"location":"configuration/problem-config/#example-1-standard-scoring","title":"Example 1: Standard Scoring","text":"<p>This is a configuration for a classic A+B problem using the standard file upload and a fixed-point scoring system.</p> <pre><code># The unique ID for the problem\nid: \"aplusb\"\n\n# The name of the problem\nname: \"A+B Problem\"\n\n# Independent open time for the problem (optional)\n# If set, it takes precedence over the contest time, but must be within the contest's time range\nstarttime: \"2025-10-01T09:00:00+08:00\"\nendtime: \"2025-10-01T12:00:00+08:00\"\n\n# Maximum number of valid submissions per user for this problem. 0 means unlimited.\nmax_submissions: 10\n\n# Specifies the scoring rule. Defaults to \"score\".\nscore:\n  mode: \"score\"\n\n# Limits on user-uploaded files (optional)\nupload:\n  upload_form: true # Enables the file upload component on the frontend\n  maxnum: 2    # Max number of files allowed\n  maxsize: 1   # Max total size for all files in MB\n\n# Judging resource configuration\ncluster: \"default-cluster\"  # Specifies which cluster to judge on\ncpu: 1                      # Number of CPU cores to request for judging\nmemory: 256                 # Amount of memory (in MB) to request for judging\n\n# The judging workflow\nworkflow:\n  # Step 1: Compile the C++ code\n  - name: \"Compile\"\n    image: \"gcc:latest\"\n    root: false\n    timeout: 10\n    show: true\n    network: false\n    steps:\n      - [\"g++\", \"main.cpp\", \"-o\", \"main\"]\n\n  # Step 2: Run and judge\n  - name: \"Run &amp; Judge\"\n    image: \"zjusct/oj-judger:latest\"\n    root: false\n    timeout: 5\n    show: false\n    network: false\n    mounts:\n      - type: bind\n        source: \"/path/on/node/testcases/aplusb\" # Path on the judger node\n        target: \"/data\"                         # Path inside the container\n        readonly: true\n    steps:\n      # This hypothetical command runs the user's program and prints the result JSON to stdout.\n      - [\"/judge\", \"--input\", \"/data/input.txt\", \"--ans\", \"/data/ans.txt\", \"./main\"]\n</code></pre>"},{"location":"configuration/problem-config/#example-2-performance-based-scoring","title":"Example 2: Performance-Based Scoring","text":"<p>This problem uses a dynamic scoring rule where a user's score is relative to the best-performing submission.</p> <pre><code>id: \"performance-example\"\nname: \"Performance Optimization\"\nmax_submissions: 5\ncluster: \"default-cluster\"\ncpu: 1\nmemory: 256\n\n# Configure the scoring mode to \"performance\"\nscore:\n  mode: \"performance\"\n  # Define the maximum score a user can get (i.e., the score for the top performance)\n  max_performance_score: 120\n\n# Configure the online editor\nupload:\n  editor: true\n  editor_files:\n    - \"main.cpp\"\n    - \"CMakeLists.txt\"\n  maxsize: 1 # Max total size of 1 MB for all editor content\n\nworkflow:\n  - name: \"Compile\"\n    image: \"gcc:latest\"\n    timeout: 10\n    show: true\n    steps:\n      - [\"cmake\", \".\"]\n      - [\"make\"]\n  - name: \"Judge\"\n    image: \"zjusct/oj-judger:latest\"\n    timeout: 5\n    show: false\n    steps:\n      # The judger for a performance problem should output a \"performance\" metric.\n      # The system will then calculate the \"score\" based on this metric.\n      - [\"/judge\", \"./main\"]\n</code></pre>"},{"location":"configuration/problem-config/#field-reference","title":"Field Reference","text":""},{"location":"configuration/problem-config/#id","title":"<code>id</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Required: Yes</li> <li>Description: A globally unique identifier for the problem.</li> </ul>"},{"location":"configuration/problem-config/#name","title":"<code>name</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Required: Yes</li> <li>Description: The display name of the problem.</li> </ul>"},{"location":"configuration/problem-config/#starttime-endtime","title":"<code>starttime</code> / <code>endtime</code>","text":"<ul> <li>Type: <code>string</code> (ISO 8601 format)</li> <li>Required: No</li> <li>Description: The independent start/end time for the problem. This is useful for contests where problems are unlocked in stages. If set, this time window must be within the parent contest's <code>starttime</code> and <code>endtime</code>.</li> </ul>"},{"location":"configuration/problem-config/#max_submissions","title":"<code>max_submissions</code>","text":"<ul> <li>Type: <code>integer</code></li> <li>Required: No</li> <li>Default: <code>0</code> (unlimited)</li> <li>Description: Limits the number of valid submissions a user can make for this problem.</li> </ul>"},{"location":"configuration/problem-config/#score","title":"<code>score</code>","text":"<ul> <li>Type: <code>object</code></li> <li>Required: No</li> <li>Description: Configures the scoring mechanism for the problem.<ul> <li><code>mode</code>: (string) The scoring mode to use.<ul> <li><code>\"score\"</code>: (Default) The judger directly returns a <code>score</code> value.</li> <li><code>\"performance\"</code>: The judger returns a <code>performance</code> value (a number), and the system calculates the score based on the ratio of the user's performance to the current best performance across all users.</li> </ul> </li> <li><code>max_performance_score</code>: (integer) Required when <code>mode</code> is <code>\"performance\"</code>. This is the score awarded to the submission with the highest performance.</li> </ul> </li> </ul>"},{"location":"configuration/problem-config/#upload","title":"<code>upload</code>","text":"<ul> <li>Type: <code>object</code></li> <li>Required: No</li> <li>Description: Configures the submission method and its limits. One of <code>upload_form</code> or <code>editor</code> should be true.<ul> <li><code>upload_form</code>: (boolean) If <code>true</code>, the frontend will display a file upload interface. Defaults to <code>false</code>.</li> <li><code>editor</code>: (boolean) If <code>true</code>, the frontend will display an online code editor. Defaults to <code>false</code>.</li> <li><code>editor_files</code>: (array of strings) When <code>editor</code> is <code>true</code>, this lists the filenames that will be shown as tabs in the online editor. The content from these editors will be submitted as files with these names.</li> <li><code>maxnum</code>: (integer) The maximum number of files a user can upload in a single submission.</li> <li><code>maxsize</code>: (integer) The maximum total size in megabytes (MB) for all files in a single submission.</li> </ul> </li> </ul>"},{"location":"configuration/problem-config/#cluster","title":"<code>cluster</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Required: Yes</li> <li>Description: Specifies which cluster the judging tasks for this problem should be scheduled to. This name must match a <code>name</code> defined in the <code>cluster</code> section of <code>config.yaml</code>.</li> </ul>"},{"location":"configuration/problem-config/#cpu","title":"<code>cpu</code>","text":"<ul> <li>Type: <code>integer</code></li> <li>Required: Yes</li> <li>Description: The number of CPU cores to request from the scheduler for a judging task.</li> </ul>"},{"location":"configuration/problem-config/#memory","title":"<code>memory</code>","text":"<ul> <li>Type: <code>integer</code></li> <li>Required: Yes</li> <li>Description: The amount of memory (in MB) to request from the scheduler for a judging task.</li> </ul>"},{"location":"configuration/problem-config/#workflow","title":"<code>workflow</code>","text":"<ul> <li>Type: <code>array of objects</code></li> <li>Required: Yes</li> <li>Description: Defines the core judging process as an array of steps that are executed sequentially. Each object in the array represents a step with the following fields:<ul> <li><code>name</code>: (string) An optional name for the step (e.g., \"Compile\", \"Judge\").</li> <li><code>image</code>: (string, required) The Docker image to be used for this step.</li> <li><code>root</code>: (boolean) Whether commands inside the container run as the <code>root</code> user. For security, this should be <code>false</code> whenever possible. Defaults to <code>false</code>.</li> <li><code>timeout</code>: (integer, required) The total timeout for this step, in seconds.</li> <li><code>show</code>: (boolean) Whether to allow regular users to view the logs for this step. Typically, compile logs are public (<code>true</code>), while judge logs (which might contain test case info) should be hidden (<code>false</code>). Defaults to <code>false</code>.</li> <li><code>network</code>: (boolean) Whether to enable network access for this step's container. Defaults to <code>false</code> (network disabled).</li> <li><code>steps</code>: (array of arrays of strings, required) A list of commands to be executed sequentially inside the container. Each command is an array of strings, like <code>[\"command\", \"arg1\", \"arg2\"]</code>.</li> <li><code>mounts</code>: (array of objects, optional) A list of additional volumes to mount into the container. Each mount object has:<ul> <li><code>type</code>: (string, optional) The mount type. Defaults to <code>bind</code>.</li> <li><code>source</code>: (string, required) The path on the host machine (the judger node).</li> <li><code>target</code>: (string, required) The path inside the container.</li> <li><code>readonly</code>: (boolean, optional) Whether to mount the volume as read-only. Defaults to <code>true</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"configuration/problem-config/#judge-result-json-format","title":"Judge Result JSON Format","text":"<p>The final step of the workflow is responsible for reporting the result by printing a JSON object to standard output. The required fields in the JSON depend on the <code>score.mode</code>.</p>"},{"location":"configuration/problem-config/#scoremode-score","title":"<code>score.mode: \"score\"</code>","text":"<p>The JSON must contain a <code>score</code> field. A <code>performance</code> field can be included but will be ignored by the scoring system.</p> <pre><code>{\n  \"score\": 100,\n  \"info\": {\n    \"message\": \"All test cases passed\",\n    \"time_usage_ms\": 50,\n    \"memory_usage_kb\": 1024\n  }\n}\n</code></pre> <ul> <li><code>score</code>: (integer, required) The final score awarded for this submission.</li> <li><code>info</code>: (object, optional) Any additional information you wish to store and display.</li> </ul>"},{"location":"configuration/problem-config/#scoremode-performance","title":"<code>score.mode: \"performance\"</code>","text":"<p>The JSON must contain a <code>performance</code> field. A <code>score</code> field can be included but will be ignored.</p> <pre><code>{\n  \"performance\": 153.28,\n  \"info\": {\n    \"message\": \"Calculation finished\",\n    \"iterations\": 1000000,\n    \"time_usage_ms\": 120\n  }\n}\n</code></pre> <ul> <li><code>performance</code>: (number, required) A metric indicating the quality of the solution. A higher value is considered better. The system will automatically calculate the final <code>score</code> based on this value relative to other users.</li> <li><code>info</code>: (object, optional) Any additional information to store and display.</li> </ul>"},{"location":"core-concepts/authentication/","title":"Authentication","text":"<p>CSOJ provides a flexible authentication system to manage user identity. Authenticated users are issued a JSON Web Token (JWT) which they must provide in the <code>Authorization</code> header for protected API endpoints.</p>"},{"location":"core-concepts/authentication/#authentication-methods","title":"Authentication Methods","text":"<p>CSOJ supports two primary authentication methods, which can be enabled in <code>config.yaml</code>.</p>"},{"location":"core-concepts/authentication/#1-local-authentication","title":"1. Local Authentication","text":"<ul> <li>Provider: CSOJ</li> <li>How it works: This is the traditional username and password system. Users can register for a new account and log in directly through the CSOJ API. Passwords are   securely stored using the <code>bcrypt</code> hashing algorithm.</li> <li> <p>Configuration (<code>config.yaml</code>):     <pre><code>auth:\n  local:\n    enabled: true\n</code></pre></p> </li> <li> <p>Relevant API Endpoints:</p> <ul> <li><code>POST /api/v1/auth/local/register</code></li> <li><code>POST /api/v1/auth/local/login</code></li> </ul> </li> </ul>"},{"location":"core-concepts/authentication/#2-gitlab-oauth2","title":"2. GitLab OAuth2","text":"<ul> <li>Provider: GitLab (e.g., gitlab.com or a self-hosted instance)</li> <li>How it works: CSOJ integrates with GitLab's OAuth2 protocol to delegate authentication. The process is as follows:<ol> <li>A user clicks a \"Login with GitLab\" button on the frontend.</li> <li>The frontend directs the user to CSOJ's <code>GET /api/v1/auth/gitlab/login</code> endpoint.</li> <li>CSOJ redirects the user to the GitLab authorization page.</li> <li>The user approves the authorization request on GitLab.</li> <li>GitLab redirects the user back to CSOJ's configured <code>redirect_uri</code> (<code>/api/v1/auth/gitlab/callback</code>).</li> <li>CSOJ's callback handler receives an authorization code, exchanges it for an access token, and fetches the user's profile.</li> <li>If the user exists in the CSOJ database (matched by GitLab ID), they are logged in. If not, a new user is created.</li> <li>CSOJ issues its own JWT and finally redirects the user to the <code>frontend_callback_url</code> with the token appended as a query parameter (e.g., <code>http://frontend.com/callback?token=...</code>).</li> </ol> </li> <li>Configuration (<code>config.yaml</code>):     <pre><code>auth:\n  gitlab:\n    url: \"[https://gitlab.com](https://gitlab.com)\"\n    client_id: \"YOUR_GITLAB_CLIENT_ID\"\n    client_secret: \"YOUR_GITLAB_CLIENT_SECRET\"\n    redirect_uri: \"[http://your-csoj-host.com/api/v1/auth/gitlab/callback](http://your-csoj-host.com/api/v1/auth/gitlab/callback)\"\n    frontend_callback_url: \"[http://your-frontend-host.com/auth/callback](http://your-frontend-host.com/auth/callback)\"\n</code></pre></li> </ul>"},{"location":"core-concepts/authentication/#json-web-token-jwt","title":"JSON Web Token (JWT)","text":"<p>Regardless of the login method, a successful authentication results in the issuance of a JWT.</p> <ul> <li>Usage: The client must include the JWT in the <code>Authorization</code> header for all subsequent requests to protected endpoints.     <pre><code>Authorization: Bearer &lt;your_jwt_token&gt;\n</code></pre></li> <li>Claims: The JWT payload contains standard claims like <code>exp</code> (expiration time) and <code>iat</code> (issued at), with the <code>sub</code> (subject) claim holding the CSOJ User ID.</li> <li>Security: The JWT is signed using HMAC with SHA-256 (HS256). The secret key used for signing is defined in <code>config.yaml</code> and is critical to the security of the system.</li> <li>Configuration (<code>config.yaml</code>):     <pre><code>auth:\n  jwt:\n    secret: \"a_very_secret_key_change_me\" # MUST be changed in production\n    expire_hours: 72\n</code></pre></li> </ul>"},{"location":"core-concepts/judger-workflow/","title":"Judger Workflow","text":"<p>The core of CSOJ is its flexible, container-based judging workflow. This workflow defines a series of steps that are executed for every submission to a problem. It is defined in the <code>workflow</code> section of a <code>problem.yaml</code> file.</p>"},{"location":"core-concepts/judger-workflow/#the-lifecycle-of-a-submission","title":"The Lifecycle of a Submission","text":"<ol> <li>Submission: A user submits their files (e.g., <code>main.cpp</code>) to a specific problem via the API.</li> <li>Queuing: The submission is received, saved to the storage, and a record is created in the database with the status <code>Queued</code>. It is then passed to the Scheduler.</li> <li>Scheduling: The Scheduler waits for a node in the problem's specified cluster to have enough CPU and memory resources.</li> <li>Dispatching: Once resources are available, the submission is assigned to a node. Its status is updated to <code>Running</code>.</li> <li>Workflow Execution: The Dispatcher on the assigned node begins executing the steps defined in the problem's <code>workflow</code>.</li> </ol>"},{"location":"core-concepts/judger-workflow/#workflow-steps","title":"Workflow Steps","text":"<p>The <code>workflow</code> is an array of steps, executed sequentially. Each step runs in a new, clean Docker container.</p>"},{"location":"core-concepts/judger-workflow/#example-workflow-from-problemyaml","title":"Example Workflow from <code>problem.yaml</code>","text":"<pre><code>workflow:\n  # Step 1: Compilation\n  - name: \"Compile\"\n    image: \"gcc:latest\"\n    timeout: 10\n    show: true\n    steps:\n      - [\"g++\", \"main.cpp\", \"-o\", \"main\", \"-O2\"]\n\n  # Step 2: Judging\n  - name: \"Judge\"\n    image: \"zjusct/oj-judger:latest\"\n    timeout: 5\n    show: false\n    steps:\n      - [\"/judge\", \"--bin\", \"./main\"]\n</code></pre>"},{"location":"core-concepts/judger-workflow/#how-it-works","title":"How It Works","text":"<ul> <li>File System Persistence: For each submission, the system creates a temporary working directory on the host judger node. This host directory is then bind-mounted into the working directory (<code>/mnt/work/</code>) of every container in the workflow. This ensures that any files created or modified in one step (like a compiled binary) are available to all subsequent steps.</li> <li>Step 1 (Compilation):<ul> <li>A container is created from the <code>gcc:latest</code> image.</li> <li>The user's submitted files are copied from storage into the host working directory, which is then mounted into the container at <code>/mnt/work/</code>.</li> <li>The command <code>g++ main.cpp -o main -O2</code> is executed, creating an executable file <code>main</code> in <code>/mnt/work/</code>.</li> <li>Because this directory is on the host, the <code>main</code> executable persists after the compilation container is destroyed.</li> </ul> </li> <li>Step 2 (Judging):<ul> <li>A new container is created from the <code>zjusct/oj-judger:latest</code> image.</li> <li>The same host working directory, which now contains both <code>main.cpp</code> and the compiled <code>main</code> executable, is mounted into this new container at <code>/mnt/work/</code>.</li> <li>The command <code>/judge --bin ./main</code> is executed to run the user's program against test cases.</li> </ul> </li> </ul>"},{"location":"core-concepts/judger-workflow/#result-reporting","title":"Result Reporting","text":"<p>The final step of the workflow has a special responsibility: it must report the judging result back to CSOJ. It does this by printing a specific JSON object to its standard output (stdout).</p>"},{"location":"core-concepts/judger-workflow/#result-json-format","title":"Result JSON Format","text":"<p>The system parses a JSON object with the following structure:</p> <pre><code>{\n  \"score\": 100,\n  \"performance\": 123.45,\n  \"info\": {\n    \"message\": \"Accepted\",\n    \"time\": \"54ms\",\n    \"memory\": \"1.2MB\"\n  }\n}\n</code></pre> <ul> <li><code>score</code> (integer): Used when the problem's <code>score.mode</code> is <code>\"score\"</code>.</li> <li><code>performance</code> (number): Used when the problem's <code>score.mode</code> is <code>\"performance\"</code>.</li> <li><code>info</code> (object, optional): A map containing any other relevant details. This data is stored in the submission record and can be displayed to the user.</li> </ul> <p>If the final step exits with a non-zero status code or fails to produce a valid JSON output, the submission will be marked as <code>Failed</code>.</p> <p>This step-by-step, containerized approach allows for immense flexibility. You can create workflows for any programming language, use custom interactor programs, run static analysis tools, or perform any other action required for judging.</p>"},{"location":"core-concepts/scheduler-cluster/","title":"Scheduler &amp; Cluster","text":"<p>CSOJ is designed for scalability. It can distribute the judging load across multiple machines, which are organized into clusters. The Scheduler is the brain that manages this process.</p>"},{"location":"core-concepts/scheduler-cluster/#key-concepts","title":"Key Concepts","text":"<ul> <li>Node: A single machine (physical or virtual) that is capable of running judging tasks. Each node must have Docker installed and accessible via a TCP socket.</li> <li>Cluster: A logical grouping of one or more Nodes. You might have a cluster of high-CPU machines, a cluster of machines with GPUs, or just a single \"default\" cluster.</li> <li>Scheduler: The central component in CSOJ that receives all submissions and assigns them to an appropriate Node for execution.</li> </ul>"},{"location":"core-concepts/scheduler-cluster/#configuration","title":"Configuration","text":"<p>Clusters and nodes are defined in the main <code>config.yaml</code> file.</p> <pre><code># config.yaml\ncluster:\n  - name: \"default-cluster\" # Cluster 1\n    node:\n      - name: \"node-1\"\n        cpu: 4    # 4 CPU cores available\n        memory: 4096 # 4096 MB memory available\n        docker: \"tcp://192.168.1.101:2375\"\n      - name: \"node-2\"\n        cpu: 8\n        memory: 8192\n        docker: \"tcp://192.168.1.102:2375\"\n\n  - name: \"gpu-cluster\" # Cluster 2\n    node:\n      - name: \"gpu-node-1\"\n        cpu: 16\n        memory: 32768\n        docker: \"tcp://192.168.1.201:2375\"\n</code></pre> <p>Problems are then assigned to a specific cluster in their <code>problem.yaml</code> configuration.</p> <pre><code># problem.yaml\nid: \"cuda-problem\"\n# ...\ncluster: \"gpu-cluster\" # This problem will only be judged on the gpu-cluster\ncpu: 2                 # It requires 2 CPU cores\nmemory: 4096           # It requires 4096 MB of memory\n# ...\n</code></pre>"},{"location":"core-concepts/scheduler-cluster/#the-scheduling-process","title":"The Scheduling Process","text":"<ol> <li>Submission Received: A user submits a solution to the \"cuda-problem\".</li> <li>Queueing: The Scheduler sees that this problem belongs to the <code>\"gpu-cluster\"</code>. It places the submission into the queue specifically for that cluster. Each cluster has its own independent FIFO (First-In, First-Out) queue.</li> <li>Resource Check: The Scheduler continuously checks the nodes within the <code>\"gpu-cluster\"</code> (in this case, only <code>\"gpu-node-1\"</code>). It looks for a node that can satisfy the resource request of the problem (2 CPU cores and 4096 MB memory).</li> <li>Resource Allocation: Let's say <code>\"gpu-node-1\"</code> is currently idle. Its available resources are 16 CPU and 32768 MB. This is sufficient. The Scheduler:<ul> <li>Finds a contiguous block of 2 CPU cores and sufficient memory. For example, cores <code>[0, 1]</code> might be available.</li> <li>Locks the requested resources on <code>\"gpu-node-1\"</code>. The node's available resources are now tracked internally as 14 CPU and 28672 MB.</li> <li>Assigns the submission to <code>\"gpu-node-1\"</code>.</li> <li>Updates the submission's status to <code>Running</code>.</li> </ul> </li> <li>Dispatching: The submission is dispatched to the Judger Workflow for execution on <code>\"gpu-node-1\"</code>, with its containers restricted to using the allocated CPU cores (e.g., <code>cpuset-cpus=\"0,1\"</code>).</li> <li>Resource Release: Once the judging process is complete (whether it succeeds or fails), the allocated resources (2 CPU, 4096 MB) are released, and the available resources on <code>\"gpu-node-1\"</code> are updated back to 16 CPU and 32768 MB. The Scheduler can now assign another task to it.</li> </ol> <p>This resource-aware scheduling ensures that nodes are not overloaded and that submissions are processed efficiently as resources become available.</p>"}]}